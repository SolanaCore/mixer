//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum MixerError {
    /// 6000 - The secret provided doesn't match with the hash present in the commitment pda
    #[error("The secret provided doesn't match with the hash present in the commitment pda")]
    InvalidSecret = 0x1770,
    /// 6001 - The amount provided to withdraw exceeds the balance of the sol_escrow account
    #[error("The amount provided to withdraw exceeds the balance of the sol_escrow account")]
    InvalidWithdrawAmount = 0x1771,
    /// 6002 - Invalid hash
    #[error("Invalid hash")]
    InvalidHash = 0x1772,
    /// 6003 - The depoist amount can't be zero
    #[error("The depoist amount can't be zero")]
    InvalidAmount = 0x1773,
}

impl solana_program_error::PrintProgramError for MixerError {
    fn print<E>(&self) {
        solana_msg::msg!(&self.to_string());
    }
}

impl<T> solana_decode_error::DecodeError<T> for MixerError {
    fn type_of() -> &'static str {
        "MixerError"
    }
}

