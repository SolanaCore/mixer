//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct WithdrawSpl {
      
              
          pub signer: solana_pubkey::Pubkey,
          
              
          pub commitment: solana_pubkey::Pubkey,
          
              
          pub token_escrow: solana_pubkey::Pubkey,
          
              
          pub token_mint: solana_pubkey::Pubkey,
          
              
          pub token_ata: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
          
              
          pub token_program: solana_pubkey::Pubkey,
          
              
          pub associate_token_program: solana_pubkey::Pubkey,
      }

impl WithdrawSpl {
  pub fn instruction(&self, args: WithdrawSplInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: WithdrawSplInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(8+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.signer,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.commitment,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.token_escrow,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_mint,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.token_ata,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.associate_token_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&WithdrawSplInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::MIXER_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct WithdrawSplInstructionData {
            discriminator: [u8; 8],
                  }

impl WithdrawSplInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [181, 154, 94, 86, 62, 115, 6, 186],
                                              }
  }
}

impl Default for WithdrawSplInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct WithdrawSplInstructionArgs {
                  pub hash: [u8; 32],
                pub amount: u64,
      }


/// Instruction builder for `WithdrawSpl`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` signer
                ///   1. `[writable]` commitment
                      ///   2. `[writable, signer]` token_escrow
          ///   3. `[]` token_mint
                ///   4. `[writable]` token_ata
                ///   5. `[optional]` system_program (default to `11111111111111111111111111111111`)
                ///   6. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
                ///   7. `[optional]` associate_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
#[derive(Clone, Debug, Default)]
pub struct WithdrawSplBuilder {
            signer: Option<solana_pubkey::Pubkey>,
                commitment: Option<solana_pubkey::Pubkey>,
                token_escrow: Option<solana_pubkey::Pubkey>,
                token_mint: Option<solana_pubkey::Pubkey>,
                token_ata: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                token_program: Option<solana_pubkey::Pubkey>,
                associate_token_program: Option<solana_pubkey::Pubkey>,
                        hash: Option<[u8; 32]>,
                amount: Option<u64>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl WithdrawSplBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn signer(&mut self, signer: solana_pubkey::Pubkey) -> &mut Self {
                        self.signer = Some(signer);
                    self
    }
            #[inline(always)]
    pub fn commitment(&mut self, commitment: solana_pubkey::Pubkey) -> &mut Self {
                        self.commitment = Some(commitment);
                    self
    }
            #[inline(always)]
    pub fn token_escrow(&mut self, token_escrow: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_escrow = Some(token_escrow);
                    self
    }
            #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_mint = Some(token_mint);
                    self
    }
            #[inline(always)]
    pub fn token_ata(&mut self, token_ata: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_ata = Some(token_ata);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
#[inline(always)]
    pub fn associate_token_program(&mut self, associate_token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.associate_token_program = Some(associate_token_program);
                    self
    }
                    #[inline(always)]
      pub fn hash(&mut self, hash: [u8; 32]) -> &mut Self {
        self.hash = Some(hash);
        self
      }
                #[inline(always)]
      pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = WithdrawSpl {
                              signer: self.signer.expect("signer is not set"),
                                        commitment: self.commitment.expect("commitment is not set"),
                                        token_escrow: self.token_escrow.expect("token_escrow is not set"),
                                        token_mint: self.token_mint.expect("token_mint is not set"),
                                        token_ata: self.token_ata.expect("token_ata is not set"),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                                        token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                                        associate_token_program: self.associate_token_program.unwrap_or(solana_pubkey::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")),
                      };
          let args = WithdrawSplInstructionArgs {
                                                              hash: self.hash.clone().expect("hash is not set"),
                                                                  amount: self.amount.clone().expect("amount is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `withdraw_spl` CPI accounts.
  pub struct WithdrawSplCpiAccounts<'a, 'b> {
          
                    
              pub signer: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub commitment: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_escrow: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_mint: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_ata: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub associate_token_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `withdraw_spl` CPI instruction.
pub struct WithdrawSplCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub signer: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub commitment: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_escrow: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_mint: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_ata: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub associate_token_program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: WithdrawSplInstructionArgs,
  }

impl<'a, 'b> WithdrawSplCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: WithdrawSplCpiAccounts<'a, 'b>,
              args: WithdrawSplInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              signer: accounts.signer,
              commitment: accounts.commitment,
              token_escrow: accounts.token_escrow,
              token_mint: accounts.token_mint,
              token_ata: accounts.token_ata,
              system_program: accounts.system_program,
              token_program: accounts.token_program,
              associate_token_program: accounts.associate_token_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(8+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.signer.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.commitment.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.token_escrow.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_mint.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.token_ata.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.associate_token_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&WithdrawSplInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::MIXER_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.signer.clone());
                        account_infos.push(self.commitment.clone());
                        account_infos.push(self.token_escrow.clone());
                        account_infos.push(self.token_mint.clone());
                        account_infos.push(self.token_ata.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.associate_token_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `WithdrawSpl` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` signer
                ///   1. `[writable]` commitment
                      ///   2. `[writable, signer]` token_escrow
          ///   3. `[]` token_mint
                ///   4. `[writable]` token_ata
          ///   5. `[]` system_program
          ///   6. `[]` token_program
          ///   7. `[]` associate_token_program
#[derive(Clone, Debug)]
pub struct WithdrawSplCpiBuilder<'a, 'b> {
  instruction: Box<WithdrawSplCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> WithdrawSplCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(WithdrawSplCpiBuilderInstruction {
      __program: program,
              signer: None,
              commitment: None,
              token_escrow: None,
              token_mint: None,
              token_ata: None,
              system_program: None,
              token_program: None,
              associate_token_program: None,
                                            hash: None,
                                amount: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn signer(&mut self, signer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.signer = Some(signer);
                    self
    }
      #[inline(always)]
    pub fn commitment(&mut self, commitment: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.commitment = Some(commitment);
                    self
    }
      #[inline(always)]
    pub fn token_escrow(&mut self, token_escrow: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_escrow = Some(token_escrow);
                    self
    }
      #[inline(always)]
    pub fn token_mint(&mut self, token_mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_mint = Some(token_mint);
                    self
    }
      #[inline(always)]
    pub fn token_ata(&mut self, token_ata: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_ata = Some(token_ata);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn associate_token_program(&mut self, associate_token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.associate_token_program = Some(associate_token_program);
                    self
    }
                    #[inline(always)]
      pub fn hash(&mut self, hash: [u8; 32]) -> &mut Self {
        self.instruction.hash = Some(hash);
        self
      }
                #[inline(always)]
      pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
          let args = WithdrawSplInstructionArgs {
                                                              hash: self.instruction.hash.clone().expect("hash is not set"),
                                                                  amount: self.instruction.amount.clone().expect("amount is not set"),
                                    };
        let instruction = WithdrawSplCpi {
        __program: self.instruction.__program,
                  
          signer: self.instruction.signer.expect("signer is not set"),
                  
          commitment: self.instruction.commitment.expect("commitment is not set"),
                  
          token_escrow: self.instruction.token_escrow.expect("token_escrow is not set"),
                  
          token_mint: self.instruction.token_mint.expect("token_mint is not set"),
                  
          token_ata: self.instruction.token_ata.expect("token_ata is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          associate_token_program: self.instruction.associate_token_program.expect("associate_token_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct WithdrawSplCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            signer: Option<&'b solana_account_info::AccountInfo<'a>>,
                commitment: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_escrow: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_ata: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                associate_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        hash: Option<[u8; 32]>,
                amount: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

