/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** InvalidSecret: The secret provided doesn't match with the hash present in the commitment pda */
export class InvalidSecretError extends ProgramError {
  override readonly name: string = 'InvalidSecret';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super(
      "The secret provided doesn't match with the hash present in the commitment pda",
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1770, InvalidSecretError);
nameToErrorMap.set('InvalidSecret', InvalidSecretError);

/** InvalidWithdrawAmount: The amount provided to withdraw exceeds the balance of the sol_escrow account */
export class InvalidWithdrawAmountError extends ProgramError {
  override readonly name: string = 'InvalidWithdrawAmount';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super(
      'The amount provided to withdraw exceeds the balance of the sol_escrow account',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1771, InvalidWithdrawAmountError);
nameToErrorMap.set('InvalidWithdrawAmount', InvalidWithdrawAmountError);

/** InvalidHash: Invalid hash */
export class InvalidHashError extends ProgramError {
  override readonly name: string = 'InvalidHash';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Invalid hash', program, cause);
  }
}
codeToErrorMap.set(0x1772, InvalidHashError);
nameToErrorMap.set('InvalidHash', InvalidHashError);

/** InvalidAmount: The depoist amount can't be zero */
export class InvalidAmountError extends ProgramError {
  override readonly name: string = 'InvalidAmount';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super("The depoist amount can't be zero", program, cause);
  }
}
codeToErrorMap.set(0x1773, InvalidAmountError);
nameToErrorMap.set('InvalidAmount', InvalidAmountError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getMixerErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getMixerErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
