/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type Commitment = Account<CommitmentAccountData>;

export type CommitmentAccountData = {
  discriminator: Uint8Array;
  hash: Array<number>;
  bump: number;
};

export type CommitmentAccountDataArgs = { hash: Array<number>; bump: number };

export function getCommitmentAccountDataSerializer(): Serializer<
  CommitmentAccountDataArgs,
  CommitmentAccountData
> {
  return mapSerializer<CommitmentAccountDataArgs, any, CommitmentAccountData>(
    struct<CommitmentAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['hash', array(u8(), { size: 32 })],
        ['bump', u8()],
      ],
      { description: 'CommitmentAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([61, 112, 129, 128, 24, 147, 77, 87]),
    })
  ) as Serializer<CommitmentAccountDataArgs, CommitmentAccountData>;
}

export function deserializeCommitment(rawAccount: RpcAccount): Commitment {
  return deserializeAccount(rawAccount, getCommitmentAccountDataSerializer());
}

export async function fetchCommitment(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Commitment> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Commitment');
  return deserializeCommitment(maybeAccount);
}

export async function safeFetchCommitment(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Commitment | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeCommitment(maybeAccount) : null;
}

export async function fetchAllCommitment(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Commitment[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Commitment');
    return deserializeCommitment(maybeAccount);
  });
}

export async function safeFetchAllCommitment(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Commitment[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeCommitment(maybeAccount as RpcAccount));
}

export function getCommitmentGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mixer',
    'Aijc1oXBzSRJKWRYrtj6e8osBASNDkkgREziGGWYvK9p'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      hash: Array<number>;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      hash: [8, array(u8(), { size: 32 })],
      bump: [40, u8()],
    })
    .deserializeUsing<Commitment>((account) => deserializeCommitment(account))
    .whereField(
      'discriminator',
      new Uint8Array([61, 112, 129, 128, 24, 147, 77, 87])
    );
}
