/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type WithdrawSplInstructionAccounts = {
  signer: Signer;
  commitment?: PublicKey | Pda;
  tokenEscrow: Signer;
  tokenMint: PublicKey | Pda;
  tokenAta: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associateTokenProgram?: PublicKey | Pda;
};

// Data.
export type WithdrawSplInstructionData = {
  discriminator: Uint8Array;
  hash: Array<number>;
  amount: bigint;
};

export type WithdrawSplInstructionDataArgs = {
  hash: Array<number>;
  amount: number | bigint;
};

export function getWithdrawSplInstructionDataSerializer(): Serializer<
  WithdrawSplInstructionDataArgs,
  WithdrawSplInstructionData
> {
  return mapSerializer<
    WithdrawSplInstructionDataArgs,
    any,
    WithdrawSplInstructionData
  >(
    struct<WithdrawSplInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['hash', array(u8(), { size: 32 })],
        ['amount', u64()],
      ],
      { description: 'WithdrawSplInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([181, 154, 94, 86, 62, 115, 6, 186]),
    })
  ) as Serializer<WithdrawSplInstructionDataArgs, WithdrawSplInstructionData>;
}

// Args.
export type WithdrawSplInstructionArgs = WithdrawSplInstructionDataArgs;

// Instruction.
export function withdrawSpl(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: WithdrawSplInstructionAccounts & WithdrawSplInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mixer',
    'Aijc1oXBzSRJKWRYrtj6e8osBASNDkkgREziGGWYvK9p'
  );

  // Accounts.
  const resolvedAccounts = {
    signer: {
      index: 0,
      isWritable: true as boolean,
      value: input.signer ?? null,
    },
    commitment: {
      index: 1,
      isWritable: true as boolean,
      value: input.commitment ?? null,
    },
    tokenEscrow: {
      index: 2,
      isWritable: true as boolean,
      value: input.tokenEscrow ?? null,
    },
    tokenMint: {
      index: 3,
      isWritable: false as boolean,
      value: input.tokenMint ?? null,
    },
    tokenAta: {
      index: 4,
      isWritable: true as boolean,
      value: input.tokenAta ?? null,
    },
    systemProgram: {
      index: 5,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    tokenProgram: {
      index: 6,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    associateTokenProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.associateTokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: WithdrawSplInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.commitment.value) {
    resolvedAccounts.commitment.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([109, 105, 120, 101, 114])),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.tokenMint.value)
      ),
    ]);
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'tokenProgram',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.associateTokenProgram.value) {
    resolvedAccounts.associateTokenProgram.value =
      context.programs.getPublicKey(
        'associateTokenProgram',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      );
    resolvedAccounts.associateTokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getWithdrawSplInstructionDataSerializer().serialize(
    resolvedArgs as WithdrawSplInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
