/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type DepositSplInstructionAccounts = {
  signer: Signer;
  commitment?: PublicKey | Pda;
  tokenEscrow?: PublicKey | Pda;
  tokenMint: PublicKey | Pda;
  tokenAta?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram?: PublicKey | Pda;
};

// Data.
export type DepositSplInstructionData = {
  discriminator: Uint8Array;
  hash: Array<number>;
  amount: bigint;
};

export type DepositSplInstructionDataArgs = {
  hash: Array<number>;
  amount: number | bigint;
};

export function getDepositSplInstructionDataSerializer(): Serializer<
  DepositSplInstructionDataArgs,
  DepositSplInstructionData
> {
  return mapSerializer<
    DepositSplInstructionDataArgs,
    any,
    DepositSplInstructionData
  >(
    struct<DepositSplInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['hash', array(u8(), { size: 32 })],
        ['amount', u64()],
      ],
      { description: 'DepositSplInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([224, 0, 198, 175, 198, 47, 105, 204]),
    })
  ) as Serializer<DepositSplInstructionDataArgs, DepositSplInstructionData>;
}

// Args.
export type DepositSplInstructionArgs = DepositSplInstructionDataArgs;

// Instruction.
export function depositSpl(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: DepositSplInstructionAccounts & DepositSplInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mixer',
    'Aijc1oXBzSRJKWRYrtj6e8osBASNDkkgREziGGWYvK9p'
  );

  // Accounts.
  const resolvedAccounts = {
    signer: {
      index: 0,
      isWritable: true as boolean,
      value: input.signer ?? null,
    },
    commitment: {
      index: 1,
      isWritable: true as boolean,
      value: input.commitment ?? null,
    },
    tokenEscrow: {
      index: 2,
      isWritable: true as boolean,
      value: input.tokenEscrow ?? null,
    },
    tokenMint: {
      index: 3,
      isWritable: false as boolean,
      value: input.tokenMint ?? null,
    },
    tokenAta: {
      index: 4,
      isWritable: true as boolean,
      value: input.tokenAta ?? null,
    },
    systemProgram: {
      index: 5,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    tokenProgram: {
      index: 6,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: DepositSplInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.commitment.value) {
    resolvedAccounts.commitment.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([109, 105, 120, 101, 114])),
      bytes().serialize(
        new Uint8Array([
          83, 111, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
          49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
          49, 49, 49, 49, 49, 49, 49, 49, 50,
        ])
      ),
    ]);
  }
  if (!resolvedAccounts.tokenEscrow.value) {
    resolvedAccounts.tokenEscrow.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([
          116, 111, 107, 101, 110, 45, 101, 115, 99, 114, 111, 119,
        ])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.commitment.value)
      ),
    ]);
  }
  if (!resolvedAccounts.tokenAta.value) {
    resolvedAccounts.tokenAta.value = context.eddsa.findPda(
      context.programs.getPublicKey(
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      ),
      [
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.signer.value)
        ),
        bytes().serialize(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.tokenMint.value)
        ),
      ]
    );
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'tokenProgram',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.associatedTokenProgram.value) {
    resolvedAccounts.associatedTokenProgram.value =
      context.programs.getPublicKey(
        'associatedTokenProgram',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      );
    resolvedAccounts.associatedTokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getDepositSplInstructionDataSerializer().serialize(
    resolvedArgs as DepositSplInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
