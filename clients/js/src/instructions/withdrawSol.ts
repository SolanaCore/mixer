/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { MIXER_PROGRAM_ADDRESS } from "../programs";
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared";

export const WITHDRAW_SOL_DISCRIMINATOR = new Uint8Array([
  145, 131, 74, 136, 65, 137, 42, 38,
]);

export function getWithdrawSolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_SOL_DISCRIMINATOR,
  );
}

export type WithdrawSolInstruction<
  TProgram extends string = typeof MIXER_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountCommitment extends string | IAccountMeta<string> = string,
  TAccountSolEscrow extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountCommitment extends string
        ? WritableAccount<TAccountCommitment>
        : TAccountCommitment,
      TAccountSolEscrow extends string
        ? WritableAccount<TAccountSolEscrow>
        : TAccountSolEscrow,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawSolInstructionData = {
  discriminator: ReadonlyUint8Array;
  hash: Array<number>;
  amount: bigint;
};

export type WithdrawSolInstructionDataArgs = {
  hash: Array<number>;
  amount: number | bigint;
};

export function getWithdrawSolInstructionDataEncoder(): Encoder<WithdrawSolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["hash", getArrayEncoder(getU8Encoder(), { size: 32 })],
      ["amount", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WITHDRAW_SOL_DISCRIMINATOR }),
  );
}

export function getWithdrawSolInstructionDataDecoder(): Decoder<WithdrawSolInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["hash", getArrayDecoder(getU8Decoder(), { size: 32 })],
    ["amount", getU64Decoder()],
  ]);
}

export function getWithdrawSolInstructionDataCodec(): Codec<
  WithdrawSolInstructionDataArgs,
  WithdrawSolInstructionData
> {
  return combineCodec(
    getWithdrawSolInstructionDataEncoder(),
    getWithdrawSolInstructionDataDecoder(),
  );
}

export type WithdrawSolAsyncInput<
  TAccountSigner extends string = string,
  TAccountCommitment extends string = string,
  TAccountSolEscrow extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  commitment?: Address<TAccountCommitment>;
  solEscrow?: Address<TAccountSolEscrow>;
  systemProgram?: Address<TAccountSystemProgram>;
  hash: WithdrawSolInstructionDataArgs["hash"];
  amount: WithdrawSolInstructionDataArgs["amount"];
};

export async function getWithdrawSolInstructionAsync<
  TAccountSigner extends string,
  TAccountCommitment extends string,
  TAccountSolEscrow extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MIXER_PROGRAM_ADDRESS,
>(
  input: WithdrawSolAsyncInput<
    TAccountSigner,
    TAccountCommitment,
    TAccountSolEscrow,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  WithdrawSolInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountCommitment,
    TAccountSolEscrow,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? MIXER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    commitment: { value: input.commitment ?? null, isWritable: true },
    solEscrow: { value: input.solEscrow ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.commitment.value) {
    accounts.commitment.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([109, 105, 120, 101, 114])),
        getBytesEncoder().encode(
          new Uint8Array([
            83, 111, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
            49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
            49, 49, 49, 49, 49, 49, 49, 49, 50,
          ]),
        ),
      ],
    });
  }
  if (!accounts.solEscrow.value) {
    accounts.solEscrow.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([115, 111, 108, 95, 101, 115, 99, 114, 111, 119]),
        ),
        getAddressEncoder().encode(expectAddress(accounts.commitment.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.commitment),
      getAccountMeta(accounts.solEscrow),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWithdrawSolInstructionDataEncoder().encode(
      args as WithdrawSolInstructionDataArgs,
    ),
  } as WithdrawSolInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountCommitment,
    TAccountSolEscrow,
    TAccountSystemProgram
  >;

  return instruction;
}

export type WithdrawSolInput<
  TAccountSigner extends string = string,
  TAccountCommitment extends string = string,
  TAccountSolEscrow extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  commitment: Address<TAccountCommitment>;
  solEscrow: Address<TAccountSolEscrow>;
  systemProgram?: Address<TAccountSystemProgram>;
  hash: WithdrawSolInstructionDataArgs["hash"];
  amount: WithdrawSolInstructionDataArgs["amount"];
};

export function getWithdrawSolInstruction<
  TAccountSigner extends string,
  TAccountCommitment extends string,
  TAccountSolEscrow extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MIXER_PROGRAM_ADDRESS,
>(
  input: WithdrawSolInput<
    TAccountSigner,
    TAccountCommitment,
    TAccountSolEscrow,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): WithdrawSolInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountCommitment,
  TAccountSolEscrow,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? MIXER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    commitment: { value: input.commitment ?? null, isWritable: true },
    solEscrow: { value: input.solEscrow ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.commitment),
      getAccountMeta(accounts.solEscrow),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWithdrawSolInstructionDataEncoder().encode(
      args as WithdrawSolInstructionDataArgs,
    ),
  } as WithdrawSolInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountCommitment,
    TAccountSolEscrow,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedWithdrawSolInstruction<
  TProgram extends string = typeof MIXER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    commitment: TAccountMetas[1];
    solEscrow: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: WithdrawSolInstructionData;
};

export function parseWithdrawSolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedWithdrawSolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      commitment: getNextAccount(),
      solEscrow: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getWithdrawSolInstructionDataDecoder().decode(instruction.data),
  };
}
