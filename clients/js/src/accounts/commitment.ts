/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from "@solana/kit";

export const COMMITMENT_DISCRIMINATOR = new Uint8Array([
  61, 112, 129, 128, 24, 147, 77, 87,
]);

export function getCommitmentDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(COMMITMENT_DISCRIMINATOR);
}

export type Commitment = {
  discriminator: ReadonlyUint8Array;
  hash: Array<number>;
  bump: number;
};

export type CommitmentArgs = { hash: Array<number>; bump: number };

export function getCommitmentEncoder(): Encoder<CommitmentArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["hash", getArrayEncoder(getU8Encoder(), { size: 32 })],
      ["bump", getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: COMMITMENT_DISCRIMINATOR }),
  );
}

export function getCommitmentDecoder(): Decoder<Commitment> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["hash", getArrayDecoder(getU8Decoder(), { size: 32 })],
    ["bump", getU8Decoder()],
  ]);
}

export function getCommitmentCodec(): Codec<CommitmentArgs, Commitment> {
  return combineCodec(getCommitmentEncoder(), getCommitmentDecoder());
}

export function decodeCommitment<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Commitment, TAddress>;
export function decodeCommitment<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Commitment, TAddress>;
export function decodeCommitment<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Commitment, TAddress> | MaybeAccount<Commitment, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCommitmentDecoder(),
  );
}

export async function fetchCommitment<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Commitment, TAddress>> {
  const maybeAccount = await fetchMaybeCommitment(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCommitment<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Commitment, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCommitment(maybeAccount);
}

export async function fetchAllCommitment(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<Commitment>[]> {
  const maybeAccounts = await fetchAllMaybeCommitment(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCommitment(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Commitment>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeCommitment(maybeAccount));
}
