"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MIXER_ERROR__INVALID_AMOUNT = exports.MIXER_ERROR__INVALID_HASH = exports.MIXER_ERROR__INVALID_WITHDRAW_AMOUNT = exports.MIXER_ERROR__INVALID_SECRET = void 0;
exports.getMixerErrorMessage = getMixerErrorMessage;
exports.isMixerError = isMixerError;
const kit_1 = require("@solana/kit");
const programs_1 = require("../programs");
/** InvalidSecret: The secret provided doesn't match with the hash present in the commitment pda */
exports.MIXER_ERROR__INVALID_SECRET = 0x1770; // 6000
/** InvalidWithdrawAmount: The amount provided to withdraw exceeds the balance of the sol_escrow account */
exports.MIXER_ERROR__INVALID_WITHDRAW_AMOUNT = 0x1771; // 6001
/** InvalidHash: Invalid hash */
exports.MIXER_ERROR__INVALID_HASH = 0x1772; // 6002
/** InvalidAmount: The depoist amount can't be zero */
exports.MIXER_ERROR__INVALID_AMOUNT = 0x1773; // 6003
let mixerErrorMessages;
if (process.env.NODE_ENV !== "production") {
    mixerErrorMessages = {
        [exports.MIXER_ERROR__INVALID_AMOUNT]: `The depoist amount can't be zero`,
        [exports.MIXER_ERROR__INVALID_HASH]: `Invalid hash`,
        [exports.MIXER_ERROR__INVALID_SECRET]: `The secret provided doesn't match with the hash present in the commitment pda`,
        [exports.MIXER_ERROR__INVALID_WITHDRAW_AMOUNT]: `The amount provided to withdraw exceeds the balance of the sol_escrow account`,
    };
}
function getMixerErrorMessage(code) {
    if (process.env.NODE_ENV !== "production") {
        return mixerErrorMessages[code];
    }
    return "Error message not available in production bundles.";
}
function isMixerError(error, transactionMessage, code) {
    return (0, kit_1.isProgramError)(error, transactionMessage, programs_1.MIXER_PROGRAM_ADDRESS, code);
}
