"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WITHDRAW_SPL_DISCRIMINATOR = void 0;
exports.getWithdrawSplDiscriminatorBytes = getWithdrawSplDiscriminatorBytes;
exports.getWithdrawSplInstructionDataEncoder = getWithdrawSplInstructionDataEncoder;
exports.getWithdrawSplInstructionDataDecoder = getWithdrawSplInstructionDataDecoder;
exports.getWithdrawSplInstructionDataCodec = getWithdrawSplInstructionDataCodec;
exports.getWithdrawSplInstructionAsync = getWithdrawSplInstructionAsync;
exports.getWithdrawSplInstruction = getWithdrawSplInstruction;
exports.parseWithdrawSplInstruction = parseWithdrawSplInstruction;
const kit_1 = require("@solana/kit");
const programs_1 = require("../programs");
const shared_1 = require("../shared");
exports.WITHDRAW_SPL_DISCRIMINATOR = new Uint8Array([
    181, 154, 94, 86, 62, 115, 6, 186,
]);
function getWithdrawSplDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.WITHDRAW_SPL_DISCRIMINATOR);
}
function getWithdrawSplInstructionDataEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ["discriminator", (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ["hash", (0, kit_1.getArrayEncoder)((0, kit_1.getU8Encoder)(), { size: 32 })],
        ["amount", (0, kit_1.getU64Encoder)()],
    ]), (value) => (Object.assign(Object.assign({}, value), { discriminator: exports.WITHDRAW_SPL_DISCRIMINATOR })));
}
function getWithdrawSplInstructionDataDecoder() {
    return (0, kit_1.getStructDecoder)([
        ["discriminator", (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ["hash", (0, kit_1.getArrayDecoder)((0, kit_1.getU8Decoder)(), { size: 32 })],
        ["amount", (0, kit_1.getU64Decoder)()],
    ]);
}
function getWithdrawSplInstructionDataCodec() {
    return (0, kit_1.combineCodec)(getWithdrawSplInstructionDataEncoder(), getWithdrawSplInstructionDataDecoder());
}
function getWithdrawSplInstructionAsync(input, config) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        // Program address.
        const programAddress = (_a = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _a !== void 0 ? _a : programs_1.MIXER_PROGRAM_ADDRESS;
        // Original accounts.
        const originalAccounts = {
            signer: { value: (_b = input.signer) !== null && _b !== void 0 ? _b : null, isWritable: true },
            commitment: { value: (_c = input.commitment) !== null && _c !== void 0 ? _c : null, isWritable: true },
            tokenEscrow: { value: (_d = input.tokenEscrow) !== null && _d !== void 0 ? _d : null, isWritable: true },
            tokenMint: { value: (_e = input.tokenMint) !== null && _e !== void 0 ? _e : null, isWritable: false },
            tokenAta: { value: (_f = input.tokenAta) !== null && _f !== void 0 ? _f : null, isWritable: true },
            systemProgram: { value: (_g = input.systemProgram) !== null && _g !== void 0 ? _g : null, isWritable: false },
            tokenProgram: { value: (_h = input.tokenProgram) !== null && _h !== void 0 ? _h : null, isWritable: false },
            associateTokenProgram: {
                value: (_j = input.associateTokenProgram) !== null && _j !== void 0 ? _j : null,
                isWritable: false,
            },
        };
        const accounts = originalAccounts;
        // Original args.
        const args = Object.assign({}, input);
        // Resolve default values.
        if (!accounts.commitment.value) {
            accounts.commitment.value = yield (0, kit_1.getProgramDerivedAddress)({
                programAddress,
                seeds: [
                    (0, kit_1.getBytesEncoder)().encode(new Uint8Array([109, 105, 120, 101, 114])),
                    (0, kit_1.getAddressEncoder)().encode((0, shared_1.expectAddress)(accounts.tokenMint.value)),
                ],
            });
        }
        if (!accounts.systemProgram.value) {
            accounts.systemProgram.value =
                "11111111111111111111111111111111";
        }
        if (!accounts.tokenProgram.value) {
            accounts.tokenProgram.value =
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
        }
        if (!accounts.associateTokenProgram.value) {
            accounts.associateTokenProgram.value =
                "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
        }
        const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, "programId");
        const instruction = {
            accounts: [
                getAccountMeta(accounts.signer),
                getAccountMeta(accounts.commitment),
                getAccountMeta(accounts.tokenEscrow),
                getAccountMeta(accounts.tokenMint),
                getAccountMeta(accounts.tokenAta),
                getAccountMeta(accounts.systemProgram),
                getAccountMeta(accounts.tokenProgram),
                getAccountMeta(accounts.associateTokenProgram),
            ],
            programAddress,
            data: getWithdrawSplInstructionDataEncoder().encode(args),
        };
        return instruction;
    });
}
function getWithdrawSplInstruction(input, config) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    // Program address.
    const programAddress = (_a = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _a !== void 0 ? _a : programs_1.MIXER_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        signer: { value: (_b = input.signer) !== null && _b !== void 0 ? _b : null, isWritable: true },
        commitment: { value: (_c = input.commitment) !== null && _c !== void 0 ? _c : null, isWritable: true },
        tokenEscrow: { value: (_d = input.tokenEscrow) !== null && _d !== void 0 ? _d : null, isWritable: true },
        tokenMint: { value: (_e = input.tokenMint) !== null && _e !== void 0 ? _e : null, isWritable: false },
        tokenAta: { value: (_f = input.tokenAta) !== null && _f !== void 0 ? _f : null, isWritable: true },
        systemProgram: { value: (_g = input.systemProgram) !== null && _g !== void 0 ? _g : null, isWritable: false },
        tokenProgram: { value: (_h = input.tokenProgram) !== null && _h !== void 0 ? _h : null, isWritable: false },
        associateTokenProgram: {
            value: (_j = input.associateTokenProgram) !== null && _j !== void 0 ? _j : null,
            isWritable: false,
        },
    };
    const accounts = originalAccounts;
    // Original args.
    const args = Object.assign({}, input);
    // Resolve default values.
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            "11111111111111111111111111111111";
    }
    if (!accounts.tokenProgram.value) {
        accounts.tokenProgram.value =
            "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
    }
    if (!accounts.associateTokenProgram.value) {
        accounts.associateTokenProgram.value =
            "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
    }
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, "programId");
    const instruction = {
        accounts: [
            getAccountMeta(accounts.signer),
            getAccountMeta(accounts.commitment),
            getAccountMeta(accounts.tokenEscrow),
            getAccountMeta(accounts.tokenMint),
            getAccountMeta(accounts.tokenAta),
            getAccountMeta(accounts.systemProgram),
            getAccountMeta(accounts.tokenProgram),
            getAccountMeta(accounts.associateTokenProgram),
        ],
        programAddress,
        data: getWithdrawSplInstructionDataEncoder().encode(args),
    };
    return instruction;
}
function parseWithdrawSplInstruction(instruction) {
    if (instruction.accounts.length < 8) {
        // TODO: Coded error.
        throw new Error("Not enough accounts");
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            signer: getNextAccount(),
            commitment: getNextAccount(),
            tokenEscrow: getNextAccount(),
            tokenMint: getNextAccount(),
            tokenAta: getNextAccount(),
            systemProgram: getNextAccount(),
            tokenProgram: getNextAccount(),
            associateTokenProgram: getNextAccount(),
        },
        data: getWithdrawSplInstructionDataDecoder().decode(instruction.data),
    };
}
