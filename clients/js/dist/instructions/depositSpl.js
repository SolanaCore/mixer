"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEPOSIT_SPL_DISCRIMINATOR = void 0;
exports.getDepositSplDiscriminatorBytes = getDepositSplDiscriminatorBytes;
exports.getDepositSplInstructionDataEncoder = getDepositSplInstructionDataEncoder;
exports.getDepositSplInstructionDataDecoder = getDepositSplInstructionDataDecoder;
exports.getDepositSplInstructionDataCodec = getDepositSplInstructionDataCodec;
exports.getDepositSplInstructionAsync = getDepositSplInstructionAsync;
exports.getDepositSplInstruction = getDepositSplInstruction;
exports.parseDepositSplInstruction = parseDepositSplInstruction;
const gill_1 = require("gill");
const programs_1 = require("../programs");
const shared_1 = require("../shared");
exports.DEPOSIT_SPL_DISCRIMINATOR = new Uint8Array([
    224, 0, 198, 175, 198, 47, 105, 204,
]);
function getDepositSplDiscriminatorBytes() {
    return (0, gill_1.fixEncoderSize)((0, gill_1.getBytesEncoder)(), 8).encode(exports.DEPOSIT_SPL_DISCRIMINATOR);
}
function getDepositSplInstructionDataEncoder() {
    return (0, gill_1.transformEncoder)((0, gill_1.getStructEncoder)([
        ['discriminator', (0, gill_1.fixEncoderSize)((0, gill_1.getBytesEncoder)(), 8)],
        ['hash', (0, gill_1.fixEncoderSize)((0, gill_1.getBytesEncoder)(), 32)],
        ['amount', (0, gill_1.getU64Encoder)()],
    ]), (value) => (Object.assign(Object.assign({}, value), { discriminator: exports.DEPOSIT_SPL_DISCRIMINATOR })));
}
function getDepositSplInstructionDataDecoder() {
    return (0, gill_1.getStructDecoder)([
        ['discriminator', (0, gill_1.fixDecoderSize)((0, gill_1.getBytesDecoder)(), 8)],
        ['hash', (0, gill_1.fixDecoderSize)((0, gill_1.getBytesDecoder)(), 32)],
        ['amount', (0, gill_1.getU64Decoder)()],
    ]);
}
function getDepositSplInstructionDataCodec() {
    return (0, gill_1.combineCodec)(getDepositSplInstructionDataEncoder(), getDepositSplInstructionDataDecoder());
}
function getDepositSplInstructionAsync(input, config) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        // Program address.
        const programAddress = (_a = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _a !== void 0 ? _a : programs_1.MIXER_PROGRAM_ADDRESS;
        // Original accounts.
        const originalAccounts = {
            signer: { value: (_b = input.signer) !== null && _b !== void 0 ? _b : null, isWritable: true },
            commitment: { value: (_c = input.commitment) !== null && _c !== void 0 ? _c : null, isWritable: true },
            tokenEscrow: { value: (_d = input.tokenEscrow) !== null && _d !== void 0 ? _d : null, isWritable: true },
            tokenMint: { value: (_e = input.tokenMint) !== null && _e !== void 0 ? _e : null, isWritable: false },
            tokenAta: { value: (_f = input.tokenAta) !== null && _f !== void 0 ? _f : null, isWritable: true },
            systemProgram: { value: (_g = input.systemProgram) !== null && _g !== void 0 ? _g : null, isWritable: false },
            tokenProgram: { value: (_h = input.tokenProgram) !== null && _h !== void 0 ? _h : null, isWritable: false },
            associatedTokenProgram: {
                value: (_j = input.associatedTokenProgram) !== null && _j !== void 0 ? _j : null,
                isWritable: false,
            },
        };
        const accounts = originalAccounts;
        // Original args.
        const args = Object.assign({}, input);
        // Resolve default values.
        if (!accounts.commitment.value) {
            accounts.commitment.value = yield (0, gill_1.getProgramDerivedAddress)({
                programAddress,
                seeds: [
                    (0, gill_1.getBytesEncoder)().encode(new Uint8Array([109, 105, 120, 101, 114])),
                    (0, gill_1.getBytesEncoder)().encode(new Uint8Array([
                        83, 111, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
                        49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
                        49, 49, 49, 49, 49, 49, 49, 49, 50,
                    ])),
                ],
            });
        }
        if (!accounts.tokenEscrow.value) {
            accounts.tokenEscrow.value = yield (0, gill_1.getProgramDerivedAddress)({
                programAddress,
                seeds: [
                    (0, gill_1.getBytesEncoder)().encode(new Uint8Array([
                        116, 111, 107, 101, 110, 45, 101, 115, 99, 114, 111, 119,
                    ])),
                    (0, gill_1.getAddressEncoder)().encode((0, shared_1.expectAddress)(accounts.commitment.value)),
                ],
            });
        }
        if (!accounts.tokenAta.value) {
            accounts.tokenAta.value = yield (0, gill_1.getProgramDerivedAddress)({
                programAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
                seeds: [
                    (0, gill_1.getAddressEncoder)().encode((0, shared_1.expectAddress)(accounts.signer.value)),
                    (0, gill_1.getBytesEncoder)().encode(new Uint8Array([
                        6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
                        121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
                        126, 255, 0, 169,
                    ])),
                    (0, gill_1.getAddressEncoder)().encode((0, shared_1.expectAddress)(accounts.tokenMint.value)),
                ],
            });
        }
        if (!accounts.systemProgram.value) {
            accounts.systemProgram.value =
                '11111111111111111111111111111111';
        }
        if (!accounts.tokenProgram.value) {
            accounts.tokenProgram.value =
                'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';
        }
        if (!accounts.associatedTokenProgram.value) {
            accounts.associatedTokenProgram.value =
                'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL';
        }
        const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
        const instruction = {
            accounts: [
                getAccountMeta(accounts.signer),
                getAccountMeta(accounts.commitment),
                getAccountMeta(accounts.tokenEscrow),
                getAccountMeta(accounts.tokenMint),
                getAccountMeta(accounts.tokenAta),
                getAccountMeta(accounts.systemProgram),
                getAccountMeta(accounts.tokenProgram),
                getAccountMeta(accounts.associatedTokenProgram),
            ],
            programAddress,
            data: getDepositSplInstructionDataEncoder().encode(args),
        };
        return instruction;
    });
}
function getDepositSplInstruction(input, config) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    // Program address.
    const programAddress = (_a = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _a !== void 0 ? _a : programs_1.MIXER_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        signer: { value: (_b = input.signer) !== null && _b !== void 0 ? _b : null, isWritable: true },
        commitment: { value: (_c = input.commitment) !== null && _c !== void 0 ? _c : null, isWritable: true },
        tokenEscrow: { value: (_d = input.tokenEscrow) !== null && _d !== void 0 ? _d : null, isWritable: true },
        tokenMint: { value: (_e = input.tokenMint) !== null && _e !== void 0 ? _e : null, isWritable: false },
        tokenAta: { value: (_f = input.tokenAta) !== null && _f !== void 0 ? _f : null, isWritable: true },
        systemProgram: { value: (_g = input.systemProgram) !== null && _g !== void 0 ? _g : null, isWritable: false },
        tokenProgram: { value: (_h = input.tokenProgram) !== null && _h !== void 0 ? _h : null, isWritable: false },
        associatedTokenProgram: {
            value: (_j = input.associatedTokenProgram) !== null && _j !== void 0 ? _j : null,
            isWritable: false,
        },
    };
    const accounts = originalAccounts;
    // Original args.
    const args = Object.assign({}, input);
    // Resolve default values.
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            '11111111111111111111111111111111';
    }
    if (!accounts.tokenProgram.value) {
        accounts.tokenProgram.value =
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';
    }
    if (!accounts.associatedTokenProgram.value) {
        accounts.associatedTokenProgram.value =
            'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL';
    }
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    const instruction = {
        accounts: [
            getAccountMeta(accounts.signer),
            getAccountMeta(accounts.commitment),
            getAccountMeta(accounts.tokenEscrow),
            getAccountMeta(accounts.tokenMint),
            getAccountMeta(accounts.tokenAta),
            getAccountMeta(accounts.systemProgram),
            getAccountMeta(accounts.tokenProgram),
            getAccountMeta(accounts.associatedTokenProgram),
        ],
        programAddress,
        data: getDepositSplInstructionDataEncoder().encode(args),
    };
    return instruction;
}
function parseDepositSplInstruction(instruction) {
    if (instruction.accounts.length < 8) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            signer: getNextAccount(),
            commitment: getNextAccount(),
            tokenEscrow: getNextAccount(),
            tokenMint: getNextAccount(),
            tokenAta: getNextAccount(),
            systemProgram: getNextAccount(),
            tokenProgram: getNextAccount(),
            associatedTokenProgram: getNextAccount(),
        },
        data: getDepositSplInstructionDataDecoder().decode(instruction.data),
    };
}
